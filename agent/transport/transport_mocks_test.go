// Code generated by MockGen. DO NOT EDIT.
// Source: transport.go

// Package transport_test is a generated GoMock package.
package transport_test

import (
	gomock "github.com/golang/mock/gomock"
	transport "github.com/kcarretto/paragon/agent/transport"
	zap "go.uber.org/zap"
	io "io"
	reflect "reflect"
)

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MockFactory) New(arg0 *zap.Logger, arg1 transport.Tasker) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockFactoryMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockFactory)(nil).New), arg0, arg1)
}

// MockTasker is a mock of Tasker interface
type MockTasker struct {
	ctrl     *gomock.Controller
	recorder *MockTaskerMockRecorder
}

// MockTaskerMockRecorder is the mock recorder for MockTasker
type MockTaskerMockRecorder struct {
	mock *MockTasker
}

// NewMockTasker creates a new mock instance
func NewMockTasker(ctrl *gomock.Controller) *MockTasker {
	mock := &MockTasker{ctrl: ctrl}
	mock.recorder = &MockTaskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTasker) EXPECT() *MockTaskerMockRecorder {
	return m.recorder
}

// QueueTask mocks base method
func (m *MockTasker) QueueTask(id string, content io.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueueTask", id, content)
}

// QueueTask indicates an expected call of QueueTask
func (mr *MockTaskerMockRecorder) QueueTask(id, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueTask", reflect.TypeOf((*MockTasker)(nil).QueueTask), id, content)
}
