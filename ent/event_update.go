// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/paragon/ent/credential"
	"github.com/kcarretto/paragon/ent/event"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/link"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/service"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetCreationTime sets the "CreationTime" field.
func (eu *EventUpdate) SetCreationTime(t time.Time) *EventUpdate {
	eu.mutation.SetCreationTime(t)
	return eu
}

// SetNillableCreationTime sets the "CreationTime" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCreationTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetCreationTime(*t)
	}
	return eu
}

// SetKind sets the "Kind" field.
func (eu *EventUpdate) SetKind(e event.Kind) *EventUpdate {
	eu.mutation.SetKind(e)
	return eu
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (eu *EventUpdate) SetJobID(id int) *EventUpdate {
	eu.mutation.SetJobID(id)
	return eu
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableJobID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetJobID(*id)
	}
	return eu
}

// SetJob sets the "job" edge to the Job entity.
func (eu *EventUpdate) SetJob(j *Job) *EventUpdate {
	return eu.SetJobID(j.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (eu *EventUpdate) SetFileID(id int) *EventUpdate {
	eu.mutation.SetFileID(id)
	return eu
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableFileID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetFileID(*id)
	}
	return eu
}

// SetFile sets the "file" edge to the File entity.
func (eu *EventUpdate) SetFile(f *File) *EventUpdate {
	return eu.SetFileID(f.ID)
}

// SetCredentialID sets the "credential" edge to the Credential entity by ID.
func (eu *EventUpdate) SetCredentialID(id int) *EventUpdate {
	eu.mutation.SetCredentialID(id)
	return eu
}

// SetNillableCredentialID sets the "credential" edge to the Credential entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableCredentialID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetCredentialID(*id)
	}
	return eu
}

// SetCredential sets the "credential" edge to the Credential entity.
func (eu *EventUpdate) SetCredential(c *Credential) *EventUpdate {
	return eu.SetCredentialID(c.ID)
}

// SetLinkID sets the "link" edge to the Link entity by ID.
func (eu *EventUpdate) SetLinkID(id int) *EventUpdate {
	eu.mutation.SetLinkID(id)
	return eu
}

// SetNillableLinkID sets the "link" edge to the Link entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableLinkID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetLinkID(*id)
	}
	return eu
}

// SetLink sets the "link" edge to the Link entity.
func (eu *EventUpdate) SetLink(l *Link) *EventUpdate {
	return eu.SetLinkID(l.ID)
}

// SetTagID sets the "tag" edge to the Tag entity by ID.
func (eu *EventUpdate) SetTagID(id int) *EventUpdate {
	eu.mutation.SetTagID(id)
	return eu
}

// SetNillableTagID sets the "tag" edge to the Tag entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableTagID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetTagID(*id)
	}
	return eu
}

// SetTag sets the "tag" edge to the Tag entity.
func (eu *EventUpdate) SetTag(t *Tag) *EventUpdate {
	return eu.SetTagID(t.ID)
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (eu *EventUpdate) SetTargetID(id int) *EventUpdate {
	eu.mutation.SetTargetID(id)
	return eu
}

// SetNillableTargetID sets the "target" edge to the Target entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableTargetID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetTargetID(*id)
	}
	return eu
}

// SetTarget sets the "target" edge to the Target entity.
func (eu *EventUpdate) SetTarget(t *Target) *EventUpdate {
	return eu.SetTargetID(t.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (eu *EventUpdate) SetTaskID(id int) *EventUpdate {
	eu.mutation.SetTaskID(id)
	return eu
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableTaskID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetTaskID(*id)
	}
	return eu
}

// SetTask sets the "task" edge to the Task entity.
func (eu *EventUpdate) SetTask(t *Task) *EventUpdate {
	return eu.SetTaskID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eu *EventUpdate) SetUserID(id int) *EventUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableUserID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *EventUpdate) SetUser(u *User) *EventUpdate {
	return eu.SetUserID(u.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (eu *EventUpdate) SetEventID(id int) *EventUpdate {
	eu.mutation.SetEventID(id)
	return eu
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableEventID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetEventID(*id)
	}
	return eu
}

// SetEvent sets the "event" edge to the Event entity.
func (eu *EventUpdate) SetEvent(e *Event) *EventUpdate {
	return eu.SetEventID(e.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (eu *EventUpdate) SetServiceID(id int) *EventUpdate {
	eu.mutation.SetServiceID(id)
	return eu
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableServiceID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetServiceID(*id)
	}
	return eu
}

// SetService sets the "service" edge to the Service entity.
func (eu *EventUpdate) SetService(s *Service) *EventUpdate {
	return eu.SetServiceID(s.ID)
}

// AddLikerIDs adds the "likers" edge to the User entity by IDs.
func (eu *EventUpdate) AddLikerIDs(ids ...int) *EventUpdate {
	eu.mutation.AddLikerIDs(ids...)
	return eu
}

// AddLikers adds the "likers" edges to the User entity.
func (eu *EventUpdate) AddLikers(u ...*User) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddLikerIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (eu *EventUpdate) SetOwnerID(id int) *EventUpdate {
	eu.mutation.SetOwnerID(id)
	return eu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableOwnerID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetOwnerID(*id)
	}
	return eu
}

// SetOwner sets the "owner" edge to the User entity.
func (eu *EventUpdate) SetOwner(u *User) *EventUpdate {
	return eu.SetOwnerID(u.ID)
}

// SetSvcOwnerID sets the "svcOwner" edge to the Service entity by ID.
func (eu *EventUpdate) SetSvcOwnerID(id int) *EventUpdate {
	eu.mutation.SetSvcOwnerID(id)
	return eu
}

// SetNillableSvcOwnerID sets the "svcOwner" edge to the Service entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableSvcOwnerID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetSvcOwnerID(*id)
	}
	return eu
}

// SetSvcOwner sets the "svcOwner" edge to the Service entity.
func (eu *EventUpdate) SetSvcOwner(s *Service) *EventUpdate {
	return eu.SetSvcOwnerID(s.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (eu *EventUpdate) ClearJob() *EventUpdate {
	eu.mutation.ClearJob()
	return eu
}

// ClearFile clears the "file" edge to the File entity.
func (eu *EventUpdate) ClearFile() *EventUpdate {
	eu.mutation.ClearFile()
	return eu
}

// ClearCredential clears the "credential" edge to the Credential entity.
func (eu *EventUpdate) ClearCredential() *EventUpdate {
	eu.mutation.ClearCredential()
	return eu
}

// ClearLink clears the "link" edge to the Link entity.
func (eu *EventUpdate) ClearLink() *EventUpdate {
	eu.mutation.ClearLink()
	return eu
}

// ClearTag clears the "tag" edge to the Tag entity.
func (eu *EventUpdate) ClearTag() *EventUpdate {
	eu.mutation.ClearTag()
	return eu
}

// ClearTarget clears the "target" edge to the Target entity.
func (eu *EventUpdate) ClearTarget() *EventUpdate {
	eu.mutation.ClearTarget()
	return eu
}

// ClearTask clears the "task" edge to the Task entity.
func (eu *EventUpdate) ClearTask() *EventUpdate {
	eu.mutation.ClearTask()
	return eu
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EventUpdate) ClearUser() *EventUpdate {
	eu.mutation.ClearUser()
	return eu
}

// ClearEvent clears the "event" edge to the Event entity.
func (eu *EventUpdate) ClearEvent() *EventUpdate {
	eu.mutation.ClearEvent()
	return eu
}

// ClearService clears the "service" edge to the Service entity.
func (eu *EventUpdate) ClearService() *EventUpdate {
	eu.mutation.ClearService()
	return eu
}

// ClearLikers clears all "likers" edges to the User entity.
func (eu *EventUpdate) ClearLikers() *EventUpdate {
	eu.mutation.ClearLikers()
	return eu
}

// RemoveLikerIDs removes the "likers" edge to User entities by IDs.
func (eu *EventUpdate) RemoveLikerIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveLikerIDs(ids...)
	return eu
}

// RemoveLikers removes "likers" edges to User entities.
func (eu *EventUpdate) RemoveLikers(u ...*User) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveLikerIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (eu *EventUpdate) ClearOwner() *EventUpdate {
	eu.mutation.ClearOwner()
	return eu
}

// ClearSvcOwner clears the "svcOwner" edge to the Service entity.
func (eu *EventUpdate) ClearSvcOwner() *EventUpdate {
	eu.mutation.ClearSvcOwner()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Kind(); ok {
		if err := event.KindValidator(v); err != nil {
			return &ValidationError{Name: "Kind", err: fmt.Errorf(`ent: validator failed for field "Event.Kind": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CreationTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldCreationTime,
		})
	}
	if value, ok := eu.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldKind,
		})
	}
	if eu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LikersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedLikersIDs(); len(nodes) > 0 && !eu.mutation.LikersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LikersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SvcOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SvcOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetCreationTime sets the "CreationTime" field.
func (euo *EventUpdateOne) SetCreationTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetCreationTime(t)
	return euo
}

// SetNillableCreationTime sets the "CreationTime" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCreationTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetCreationTime(*t)
	}
	return euo
}

// SetKind sets the "Kind" field.
func (euo *EventUpdateOne) SetKind(e event.Kind) *EventUpdateOne {
	euo.mutation.SetKind(e)
	return euo
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (euo *EventUpdateOne) SetJobID(id int) *EventUpdateOne {
	euo.mutation.SetJobID(id)
	return euo
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableJobID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetJobID(*id)
	}
	return euo
}

// SetJob sets the "job" edge to the Job entity.
func (euo *EventUpdateOne) SetJob(j *Job) *EventUpdateOne {
	return euo.SetJobID(j.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (euo *EventUpdateOne) SetFileID(id int) *EventUpdateOne {
	euo.mutation.SetFileID(id)
	return euo
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFileID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetFileID(*id)
	}
	return euo
}

// SetFile sets the "file" edge to the File entity.
func (euo *EventUpdateOne) SetFile(f *File) *EventUpdateOne {
	return euo.SetFileID(f.ID)
}

// SetCredentialID sets the "credential" edge to the Credential entity by ID.
func (euo *EventUpdateOne) SetCredentialID(id int) *EventUpdateOne {
	euo.mutation.SetCredentialID(id)
	return euo
}

// SetNillableCredentialID sets the "credential" edge to the Credential entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCredentialID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetCredentialID(*id)
	}
	return euo
}

// SetCredential sets the "credential" edge to the Credential entity.
func (euo *EventUpdateOne) SetCredential(c *Credential) *EventUpdateOne {
	return euo.SetCredentialID(c.ID)
}

// SetLinkID sets the "link" edge to the Link entity by ID.
func (euo *EventUpdateOne) SetLinkID(id int) *EventUpdateOne {
	euo.mutation.SetLinkID(id)
	return euo
}

// SetNillableLinkID sets the "link" edge to the Link entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLinkID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetLinkID(*id)
	}
	return euo
}

// SetLink sets the "link" edge to the Link entity.
func (euo *EventUpdateOne) SetLink(l *Link) *EventUpdateOne {
	return euo.SetLinkID(l.ID)
}

// SetTagID sets the "tag" edge to the Tag entity by ID.
func (euo *EventUpdateOne) SetTagID(id int) *EventUpdateOne {
	euo.mutation.SetTagID(id)
	return euo
}

// SetNillableTagID sets the "tag" edge to the Tag entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTagID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTagID(*id)
	}
	return euo
}

// SetTag sets the "tag" edge to the Tag entity.
func (euo *EventUpdateOne) SetTag(t *Tag) *EventUpdateOne {
	return euo.SetTagID(t.ID)
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (euo *EventUpdateOne) SetTargetID(id int) *EventUpdateOne {
	euo.mutation.SetTargetID(id)
	return euo
}

// SetNillableTargetID sets the "target" edge to the Target entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTargetID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTargetID(*id)
	}
	return euo
}

// SetTarget sets the "target" edge to the Target entity.
func (euo *EventUpdateOne) SetTarget(t *Target) *EventUpdateOne {
	return euo.SetTargetID(t.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (euo *EventUpdateOne) SetTaskID(id int) *EventUpdateOne {
	euo.mutation.SetTaskID(id)
	return euo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTaskID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTaskID(*id)
	}
	return euo
}

// SetTask sets the "task" edge to the Task entity.
func (euo *EventUpdateOne) SetTask(t *Task) *EventUpdateOne {
	return euo.SetTaskID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (euo *EventUpdateOne) SetUserID(id int) *EventUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUserID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *EventUpdateOne) SetUser(u *User) *EventUpdateOne {
	return euo.SetUserID(u.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (euo *EventUpdateOne) SetEventID(id int) *EventUpdateOne {
	euo.mutation.SetEventID(id)
	return euo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetEventID(*id)
	}
	return euo
}

// SetEvent sets the "event" edge to the Event entity.
func (euo *EventUpdateOne) SetEvent(e *Event) *EventUpdateOne {
	return euo.SetEventID(e.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (euo *EventUpdateOne) SetServiceID(id int) *EventUpdateOne {
	euo.mutation.SetServiceID(id)
	return euo
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableServiceID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetServiceID(*id)
	}
	return euo
}

// SetService sets the "service" edge to the Service entity.
func (euo *EventUpdateOne) SetService(s *Service) *EventUpdateOne {
	return euo.SetServiceID(s.ID)
}

// AddLikerIDs adds the "likers" edge to the User entity by IDs.
func (euo *EventUpdateOne) AddLikerIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddLikerIDs(ids...)
	return euo
}

// AddLikers adds the "likers" edges to the User entity.
func (euo *EventUpdateOne) AddLikers(u ...*User) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddLikerIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (euo *EventUpdateOne) SetOwnerID(id int) *EventUpdateOne {
	euo.mutation.SetOwnerID(id)
	return euo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableOwnerID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetOwnerID(*id)
	}
	return euo
}

// SetOwner sets the "owner" edge to the User entity.
func (euo *EventUpdateOne) SetOwner(u *User) *EventUpdateOne {
	return euo.SetOwnerID(u.ID)
}

// SetSvcOwnerID sets the "svcOwner" edge to the Service entity by ID.
func (euo *EventUpdateOne) SetSvcOwnerID(id int) *EventUpdateOne {
	euo.mutation.SetSvcOwnerID(id)
	return euo
}

// SetNillableSvcOwnerID sets the "svcOwner" edge to the Service entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSvcOwnerID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetSvcOwnerID(*id)
	}
	return euo
}

// SetSvcOwner sets the "svcOwner" edge to the Service entity.
func (euo *EventUpdateOne) SetSvcOwner(s *Service) *EventUpdateOne {
	return euo.SetSvcOwnerID(s.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (euo *EventUpdateOne) ClearJob() *EventUpdateOne {
	euo.mutation.ClearJob()
	return euo
}

// ClearFile clears the "file" edge to the File entity.
func (euo *EventUpdateOne) ClearFile() *EventUpdateOne {
	euo.mutation.ClearFile()
	return euo
}

// ClearCredential clears the "credential" edge to the Credential entity.
func (euo *EventUpdateOne) ClearCredential() *EventUpdateOne {
	euo.mutation.ClearCredential()
	return euo
}

// ClearLink clears the "link" edge to the Link entity.
func (euo *EventUpdateOne) ClearLink() *EventUpdateOne {
	euo.mutation.ClearLink()
	return euo
}

// ClearTag clears the "tag" edge to the Tag entity.
func (euo *EventUpdateOne) ClearTag() *EventUpdateOne {
	euo.mutation.ClearTag()
	return euo
}

// ClearTarget clears the "target" edge to the Target entity.
func (euo *EventUpdateOne) ClearTarget() *EventUpdateOne {
	euo.mutation.ClearTarget()
	return euo
}

// ClearTask clears the "task" edge to the Task entity.
func (euo *EventUpdateOne) ClearTask() *EventUpdateOne {
	euo.mutation.ClearTask()
	return euo
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EventUpdateOne) ClearUser() *EventUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// ClearEvent clears the "event" edge to the Event entity.
func (euo *EventUpdateOne) ClearEvent() *EventUpdateOne {
	euo.mutation.ClearEvent()
	return euo
}

// ClearService clears the "service" edge to the Service entity.
func (euo *EventUpdateOne) ClearService() *EventUpdateOne {
	euo.mutation.ClearService()
	return euo
}

// ClearLikers clears all "likers" edges to the User entity.
func (euo *EventUpdateOne) ClearLikers() *EventUpdateOne {
	euo.mutation.ClearLikers()
	return euo
}

// RemoveLikerIDs removes the "likers" edge to User entities by IDs.
func (euo *EventUpdateOne) RemoveLikerIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveLikerIDs(ids...)
	return euo
}

// RemoveLikers removes "likers" edges to User entities.
func (euo *EventUpdateOne) RemoveLikers(u ...*User) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveLikerIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (euo *EventUpdateOne) ClearOwner() *EventUpdateOne {
	euo.mutation.ClearOwner()
	return euo
}

// ClearSvcOwner clears the "svcOwner" edge to the Service entity.
func (euo *EventUpdateOne) ClearSvcOwner() *EventUpdateOne {
	euo.mutation.ClearSvcOwner()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Kind(); ok {
		if err := event.KindValidator(v); err != nil {
			return &ValidationError{Name: "Kind", err: fmt.Errorf(`ent: validator failed for field "Event.Kind": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.CreationTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldCreationTime,
		})
	}
	if value, ok := euo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldKind,
		})
	}
	if euo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LikersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedLikersIDs(); len(nodes) > 0 && !euo.mutation.LikersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LikersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SvcOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SvcOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
