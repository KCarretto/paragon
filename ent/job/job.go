// Code generated by entc, DO NOT EDIT.

package job

import (
	"time"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreationTime holds the string denoting the creationtime field in the database.
	FieldCreationTime = "creation_time"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldStaged holds the string denoting the staged field in the database.
	FieldStaged = "staged"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgePrev holds the string denoting the prev edge name in mutations.
	EdgePrev = "prev"
	// EdgeNext holds the string denoting the next edge name in mutations.
	EdgeNext = "next"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "job_tasks"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "job_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// PrevTable is the table that holds the prev relation/edge.
	PrevTable = "jobs"
	// PrevColumn is the table column denoting the prev relation/edge.
	PrevColumn = "job_next"
	// NextTable is the table that holds the next relation/edge.
	NextTable = "jobs"
	// NextColumn is the table column denoting the next relation/edge.
	NextColumn = "job_next"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "jobs"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_jobs"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreationTime,
	FieldContent,
	FieldStaged,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"job_next",
	"user_jobs",
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"job_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreationTime holds the default value on creation for the "CreationTime" field.
	DefaultCreationTime func() time.Time
	// ContentValidator is a validator for the "Content" field. It is called by the builders before save.
	ContentValidator func(string) error
)
