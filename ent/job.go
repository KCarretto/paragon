// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/user"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	// The name of the job
	Name string `json:"Name,omitempty"`
	// CreationTime holds the value of the "CreationTime" field.
	// The timestamp for when the Job was created
	CreationTime time.Time `json:"CreationTime,omitempty"`
	// Content holds the value of the "Content" field.
	// The content of the job (usually a Renegade Script)
	Content string `json:"Content,omitempty"`
	// Staged holds the value of the "Staged" field.
	// The boolean that represents if a job's tasks shall be emitted/returned from claimTasks (false means yes)
	Staged bool `json:"Staged,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges     JobEdges `json:"edges"`
	job_next  *int
	user_jobs *int
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Prev holds the value of the prev edge.
	Prev *Job `json:"prev,omitempty"`
	// Next holds the value of the next edge.
	Next *Job `json:"next,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// PrevOrErr returns the Prev value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) PrevOrErr() (*Job, error) {
	if e.loadedTypes[2] {
		if e.Prev == nil {
			// The edge prev was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: job.Label}
		}
		return e.Prev, nil
	}
	return nil, &NotLoadedError{edge: "prev"}
}

// NextOrErr returns the Next value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) NextOrErr() (*Job, error) {
	if e.loadedTypes[3] {
		if e.Next == nil {
			// The edge next was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: job.Label}
		}
		return e.Next, nil
	}
	return nil, &NotLoadedError{edge: "next"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldStaged:
			values[i] = new(sql.NullBool)
		case job.FieldID:
			values[i] = new(sql.NullInt64)
		case job.FieldName, job.FieldContent:
			values[i] = new(sql.NullString)
		case job.FieldCreationTime:
			values[i] = new(sql.NullTime)
		case job.ForeignKeys[0]: // job_next
			values[i] = new(sql.NullInt64)
		case job.ForeignKeys[1]: // user_jobs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Job", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case job.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				j.Name = value.String
			}
		case job.FieldCreationTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreationTime", values[i])
			} else if value.Valid {
				j.CreationTime = value.Time
			}
		case job.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Content", values[i])
			} else if value.Valid {
				j.Content = value.String
			}
		case job.FieldStaged:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Staged", values[i])
			} else if value.Valid {
				j.Staged = value.Bool
			}
		case job.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_next", value)
			} else if value.Valid {
				j.job_next = new(int)
				*j.job_next = int(value.Int64)
			}
		case job.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_jobs", value)
			} else if value.Valid {
				j.user_jobs = new(int)
				*j.user_jobs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTasks queries the "tasks" edge of the Job entity.
func (j *Job) QueryTasks() *TaskQuery {
	return (&JobClient{config: j.config}).QueryTasks(j)
}

// QueryTags queries the "tags" edge of the Job entity.
func (j *Job) QueryTags() *TagQuery {
	return (&JobClient{config: j.config}).QueryTags(j)
}

// QueryPrev queries the "prev" edge of the Job entity.
func (j *Job) QueryPrev() *JobQuery {
	return (&JobClient{config: j.config}).QueryPrev(j)
}

// QueryNext queries the "next" edge of the Job entity.
func (j *Job) QueryNext() *JobQuery {
	return (&JobClient{config: j.config}).QueryNext(j)
}

// QueryOwner queries the "owner" edge of the Job entity.
func (j *Job) QueryOwner() *UserQuery {
	return (&JobClient{config: j.config}).QueryOwner(j)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return (&JobClient{config: j.config}).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v", j.ID))
	builder.WriteString(", Name=")
	builder.WriteString(j.Name)
	builder.WriteString(", CreationTime=")
	builder.WriteString(j.CreationTime.Format(time.ANSIC))
	builder.WriteString(", Content=")
	builder.WriteString(j.Content)
	builder.WriteString(", Staged=")
	builder.WriteString(fmt.Sprintf("%v", j.Staged))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job

func (j Jobs) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
