// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOAuthID holds the string denoting the oauthid field in the database.
	FieldOAuthID = "oauth_id"
	// FieldPhotoURL holds the string denoting the photourl field in the database.
	FieldPhotoURL = "photo_url"
	// FieldSessionToken holds the string denoting the sessiontoken field in the database.
	FieldSessionToken = "session_token"
	// FieldIsActivated holds the string denoting the isactivated field in the database.
	FieldIsActivated = "is_activated"
	// FieldIsAdmin holds the string denoting the isadmin field in the database.
	FieldIsAdmin = "is_admin"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// Table holds the table name of the user in the database.
	Table = "users"
	// JobsTable is the table that holds the jobs relation/edge.
	JobsTable = "jobs"
	// JobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobsInverseTable = "jobs"
	// JobsColumn is the table column denoting the jobs relation/edge.
	JobsColumn = "user_jobs"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "user_events"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOAuthID,
	FieldPhotoURL,
	FieldSessionToken,
	FieldIsActivated,
	FieldIsAdmin,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_likers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SessionTokenValidator is a validator for the "SessionToken" field. It is called by the builders before save.
	SessionTokenValidator func(string) error
	// DefaultIsActivated holds the default value on creation for the "IsActivated" field.
	DefaultIsActivated bool
	// DefaultIsAdmin holds the default value on creation for the "IsAdmin" field.
	DefaultIsAdmin bool
)
