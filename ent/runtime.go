// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/kcarretto/paragon/ent/credential"
	"github.com/kcarretto/paragon/ent/event"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/link"
	"github.com/kcarretto/paragon/ent/schema"
	"github.com/kcarretto/paragon/ent/service"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	credentialFields := schema.Credential{}.Fields()
	_ = credentialFields
	// credentialDescSecret is the schema descriptor for secret field.
	credentialDescSecret := credentialFields[1].Descriptor()
	// credential.SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	credential.SecretValidator = credentialDescSecret.Validators[0].(func(string) error)
	// credentialDescFails is the schema descriptor for fails field.
	credentialDescFails := credentialFields[3].Descriptor()
	// credential.DefaultFails holds the default value on creation for the fails field.
	credential.DefaultFails = credentialDescFails.Default.(int)
	// credential.FailsValidator is a validator for the "fails" field. It is called by the builders before save.
	credential.FailsValidator = credentialDescFails.Validators[0].(func(int) error)
	eventFields := schema.Event{}.Fields()
	_ = eventFields
	// eventDescCreationTime is the schema descriptor for CreationTime field.
	eventDescCreationTime := eventFields[0].Descriptor()
	// event.DefaultCreationTime holds the default value on creation for the CreationTime field.
	event.DefaultCreationTime = eventDescCreationTime.Default.(func() time.Time)
	fileFields := schema.File{}.Fields()
	_ = fileFields
	// fileDescName is the schema descriptor for Name field.
	fileDescName := fileFields[0].Descriptor()
	// file.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	file.NameValidator = func() func(string) error {
		validators := fileDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Name string) error {
			for _, fn := range fns {
				if err := fn(_Name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fileDescCreationTime is the schema descriptor for CreationTime field.
	fileDescCreationTime := fileFields[1].Descriptor()
	// file.DefaultCreationTime holds the default value on creation for the CreationTime field.
	file.DefaultCreationTime = fileDescCreationTime.Default.(func() time.Time)
	// fileDescSize is the schema descriptor for Size field.
	fileDescSize := fileFields[3].Descriptor()
	// file.DefaultSize holds the default value on creation for the Size field.
	file.DefaultSize = fileDescSize.Default.(int)
	// file.SizeValidator is a validator for the "Size" field. It is called by the builders before save.
	file.SizeValidator = fileDescSize.Validators[0].(func(int) error)
	// fileDescHash is the schema descriptor for Hash field.
	fileDescHash := fileFields[5].Descriptor()
	// file.HashValidator is a validator for the "Hash" field. It is called by the builders before save.
	file.HashValidator = fileDescHash.Validators[0].(func(string) error)
	jobFields := schema.Job{}.Fields()
	_ = jobFields
	// jobDescName is the schema descriptor for Name field.
	jobDescName := jobFields[0].Descriptor()
	// job.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	job.NameValidator = jobDescName.Validators[0].(func(string) error)
	// jobDescCreationTime is the schema descriptor for CreationTime field.
	jobDescCreationTime := jobFields[1].Descriptor()
	// job.DefaultCreationTime holds the default value on creation for the CreationTime field.
	job.DefaultCreationTime = jobDescCreationTime.Default.(func() time.Time)
	// jobDescContent is the schema descriptor for Content field.
	jobDescContent := jobFields[2].Descriptor()
	// job.ContentValidator is a validator for the "Content" field. It is called by the builders before save.
	job.ContentValidator = jobDescContent.Validators[0].(func(string) error)
	linkFields := schema.Link{}.Fields()
	_ = linkFields
	// linkDescAlias is the schema descriptor for Alias field.
	linkDescAlias := linkFields[0].Descriptor()
	// link.AliasValidator is a validator for the "Alias" field. It is called by the builders before save.
	link.AliasValidator = func() func(string) error {
		validators := linkDescAlias.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Alias string) error {
			for _, fn := range fns {
				if err := fn(_Alias); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// linkDescClicks is the schema descriptor for Clicks field.
	linkDescClicks := linkFields[2].Descriptor()
	// link.DefaultClicks holds the default value on creation for the Clicks field.
	link.DefaultClicks = linkDescClicks.Default.(int)
	// link.ClicksValidator is a validator for the "Clicks" field. It is called by the builders before save.
	link.ClicksValidator = linkDescClicks.Validators[0].(func(int) error)
	serviceFields := schema.Service{}.Fields()
	_ = serviceFields
	// serviceDescName is the schema descriptor for Name field.
	serviceDescName := serviceFields[0].Descriptor()
	// service.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	service.NameValidator = serviceDescName.Validators[0].(func(string) error)
	// serviceDescPubKey is the schema descriptor for PubKey field.
	serviceDescPubKey := serviceFields[1].Descriptor()
	// service.PubKeyValidator is a validator for the "PubKey" field. It is called by the builders before save.
	service.PubKeyValidator = serviceDescPubKey.Validators[0].(func(string) error)
	// serviceDescConfig is the schema descriptor for Config field.
	serviceDescConfig := serviceFields[2].Descriptor()
	// service.DefaultConfig holds the default value on creation for the Config field.
	service.DefaultConfig = serviceDescConfig.Default.(string)
	// serviceDescIsActivated is the schema descriptor for IsActivated field.
	serviceDescIsActivated := serviceFields[3].Descriptor()
	// service.DefaultIsActivated holds the default value on creation for the IsActivated field.
	service.DefaultIsActivated = serviceDescIsActivated.Default.(bool)
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescName is the schema descriptor for Name field.
	tagDescName := tagFields[0].Descriptor()
	// tag.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	tag.NameValidator = tagDescName.Validators[0].(func(string) error)
	targetFields := schema.Target{}.Fields()
	_ = targetFields
	// targetDescName is the schema descriptor for Name field.
	targetDescName := targetFields[0].Descriptor()
	// target.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	target.NameValidator = targetDescName.Validators[0].(func(string) error)
	// targetDescMachineUUID is the schema descriptor for MachineUUID field.
	targetDescMachineUUID := targetFields[3].Descriptor()
	// target.MachineUUIDValidator is a validator for the "MachineUUID" field. It is called by the builders before save.
	target.MachineUUIDValidator = targetDescMachineUUID.Validators[0].(func(string) error)
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescQueueTime is the schema descriptor for QueueTime field.
	taskDescQueueTime := taskFields[0].Descriptor()
	// task.DefaultQueueTime holds the default value on creation for the QueueTime field.
	task.DefaultQueueTime = taskDescQueueTime.Default.(func() time.Time)
	// taskDescContent is the schema descriptor for Content field.
	taskDescContent := taskFields[5].Descriptor()
	// task.ContentValidator is a validator for the "Content" field. It is called by the builders before save.
	task.ContentValidator = taskDescContent.Validators[0].(func(string) error)
	// taskDescSessionID is the schema descriptor for SessionID field.
	taskDescSessionID := taskFields[8].Descriptor()
	// task.SessionIDValidator is a validator for the "SessionID" field. It is called by the builders before save.
	task.SessionIDValidator = taskDescSessionID.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for Name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Name string) error {
			for _, fn := range fns {
				if err := fn(_Name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescSessionToken is the schema descriptor for SessionToken field.
	userDescSessionToken := userFields[3].Descriptor()
	// user.SessionTokenValidator is a validator for the "SessionToken" field. It is called by the builders before save.
	user.SessionTokenValidator = userDescSessionToken.Validators[0].(func(string) error)
	// userDescIsActivated is the schema descriptor for IsActivated field.
	userDescIsActivated := userFields[4].Descriptor()
	// user.DefaultIsActivated holds the default value on creation for the IsActivated field.
	user.DefaultIsActivated = userDescIsActivated.Default.(bool)
	// userDescIsAdmin is the schema descriptor for IsAdmin field.
	userDescIsAdmin := userFields[5].Descriptor()
	// user.DefaultIsAdmin holds the default value on creation for the IsAdmin field.
	user.DefaultIsAdmin = userDescIsAdmin.Default.(bool)
}
