// Code generated by entc, DO NOT EDIT.

package task

import (
	"time"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQueueTime holds the string denoting the queuetime field in the database.
	FieldQueueTime = "queue_time"
	// FieldLastChangedTime holds the string denoting the lastchangedtime field in the database.
	FieldLastChangedTime = "last_changed_time"
	// FieldClaimTime holds the string denoting the claimtime field in the database.
	FieldClaimTime = "claim_time"
	// FieldExecStartTime holds the string denoting the execstarttime field in the database.
	FieldExecStartTime = "exec_start_time"
	// FieldExecStopTime holds the string denoting the execstoptime field in the database.
	FieldExecStopTime = "exec_stop_time"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldSessionID holds the string denoting the sessionid field in the database.
	FieldSessionID = "session_id"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeJob holds the string denoting the job edge name in mutations.
	EdgeJob = "job"
	// EdgeTarget holds the string denoting the target edge name in mutations.
	EdgeTarget = "target"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "task_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// JobTable is the table that holds the job relation/edge.
	JobTable = "tasks"
	// JobInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobInverseTable = "jobs"
	// JobColumn is the table column denoting the job relation/edge.
	JobColumn = "job_tasks"
	// TargetTable is the table that holds the target relation/edge.
	TargetTable = "tasks"
	// TargetInverseTable is the table name for the Target entity.
	// It exists in this package in order to avoid circular dependency with the "target" package.
	TargetInverseTable = "targets"
	// TargetColumn is the table column denoting the target relation/edge.
	TargetColumn = "target_tasks"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldQueueTime,
	FieldLastChangedTime,
	FieldClaimTime,
	FieldExecStartTime,
	FieldExecStopTime,
	FieldContent,
	FieldOutput,
	FieldError,
	FieldSessionID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"job_tasks",
	"target_tasks",
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"task_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultQueueTime holds the default value on creation for the "QueueTime" field.
	DefaultQueueTime func() time.Time
	// ContentValidator is a validator for the "Content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// SessionIDValidator is a validator for the "SessionID" field. It is called by the builders before save.
	SessionIDValidator func(string) error
)
