// Code generated by entc, DO NOT EDIT.

package service

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPubKey holds the string denoting the pubkey field in the database.
	FieldPubKey = "pub_key"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldIsActivated holds the string denoting the isactivated field in the database.
	FieldIsActivated = "is_activated"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// Table holds the table name of the service in the database.
	Table = "services"
	// TagTable is the table that holds the tag relation/edge.
	TagTable = "services"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "service_tag"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "service_events"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPubKey,
	FieldConfig,
	FieldIsActivated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "services"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"service_tag",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PubKeyValidator is a validator for the "PubKey" field. It is called by the builders before save.
	PubKeyValidator func(string) error
	// DefaultConfig holds the default value on creation for the "Config" field.
	DefaultConfig string
	// DefaultIsActivated holds the default value on creation for the "IsActivated" field.
	DefaultIsActivated bool
)
