// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetName sets the "Name" field.
func (ju *JobUpdate) SetName(s string) *JobUpdate {
	ju.mutation.SetName(s)
	return ju
}

// SetCreationTime sets the "CreationTime" field.
func (ju *JobUpdate) SetCreationTime(t time.Time) *JobUpdate {
	ju.mutation.SetCreationTime(t)
	return ju
}

// SetNillableCreationTime sets the "CreationTime" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCreationTime(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetCreationTime(*t)
	}
	return ju
}

// SetContent sets the "Content" field.
func (ju *JobUpdate) SetContent(s string) *JobUpdate {
	ju.mutation.SetContent(s)
	return ju
}

// SetStaged sets the "Staged" field.
func (ju *JobUpdate) SetStaged(b bool) *JobUpdate {
	ju.mutation.SetStaged(b)
	return ju
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ju *JobUpdate) AddTaskIDs(ids ...int) *JobUpdate {
	ju.mutation.AddTaskIDs(ids...)
	return ju
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ju *JobUpdate) AddTasks(t ...*Task) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.AddTaskIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ju *JobUpdate) AddTagIDs(ids ...int) *JobUpdate {
	ju.mutation.AddTagIDs(ids...)
	return ju
}

// AddTags adds the "tags" edges to the Tag entity.
func (ju *JobUpdate) AddTags(t ...*Tag) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.AddTagIDs(ids...)
}

// SetPrevID sets the "prev" edge to the Job entity by ID.
func (ju *JobUpdate) SetPrevID(id int) *JobUpdate {
	ju.mutation.SetPrevID(id)
	return ju
}

// SetNillablePrevID sets the "prev" edge to the Job entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillablePrevID(id *int) *JobUpdate {
	if id != nil {
		ju = ju.SetPrevID(*id)
	}
	return ju
}

// SetPrev sets the "prev" edge to the Job entity.
func (ju *JobUpdate) SetPrev(j *Job) *JobUpdate {
	return ju.SetPrevID(j.ID)
}

// SetNextID sets the "next" edge to the Job entity by ID.
func (ju *JobUpdate) SetNextID(id int) *JobUpdate {
	ju.mutation.SetNextID(id)
	return ju
}

// SetNillableNextID sets the "next" edge to the Job entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableNextID(id *int) *JobUpdate {
	if id != nil {
		ju = ju.SetNextID(*id)
	}
	return ju
}

// SetNext sets the "next" edge to the Job entity.
func (ju *JobUpdate) SetNext(j *Job) *JobUpdate {
	return ju.SetNextID(j.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ju *JobUpdate) SetOwnerID(id int) *JobUpdate {
	ju.mutation.SetOwnerID(id)
	return ju
}

// SetOwner sets the "owner" edge to the User entity.
func (ju *JobUpdate) SetOwner(u *User) *JobUpdate {
	return ju.SetOwnerID(u.ID)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ju *JobUpdate) ClearTasks() *JobUpdate {
	ju.mutation.ClearTasks()
	return ju
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ju *JobUpdate) RemoveTaskIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveTaskIDs(ids...)
	return ju
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ju *JobUpdate) RemoveTasks(t ...*Task) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.RemoveTaskIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (ju *JobUpdate) ClearTags() *JobUpdate {
	ju.mutation.ClearTags()
	return ju
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (ju *JobUpdate) RemoveTagIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveTagIDs(ids...)
	return ju
}

// RemoveTags removes "tags" edges to Tag entities.
func (ju *JobUpdate) RemoveTags(t ...*Tag) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.RemoveTagIDs(ids...)
}

// ClearPrev clears the "prev" edge to the Job entity.
func (ju *JobUpdate) ClearPrev() *JobUpdate {
	ju.mutation.ClearPrev()
	return ju
}

// ClearNext clears the "next" edge to the Job entity.
func (ju *JobUpdate) ClearNext() *JobUpdate {
	ju.mutation.ClearNext()
	return ju
}

// ClearOwner clears the "owner" edge to the User entity.
func (ju *JobUpdate) ClearOwner() *JobUpdate {
	ju.mutation.ClearOwner()
	return ju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ju.hooks) == 0 {
		if err = ju.check(); err != nil {
			return 0, err
		}
		affected, err = ju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ju.check(); err != nil {
				return 0, err
			}
			ju.mutation = mutation
			affected, err = ju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ju.hooks) - 1; i >= 0; i-- {
			if ju.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Job.Name": %w`, err)}
		}
	}
	if v, ok := ju.mutation.Content(); ok {
		if err := job.ContentValidator(v); err != nil {
			return &ValidationError{Name: "Content", err: fmt.Errorf(`ent: validator failed for field "Job.Content": %w`, err)}
		}
	}
	if _, ok := ju.mutation.OwnerID(); ju.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Job.owner"`)
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldName,
		})
	}
	if value, ok := ju.mutation.CreationTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCreationTime,
		})
	}
	if value, ok := ju.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldContent,
		})
	}
	if value, ok := ju.mutation.Staged(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldStaged,
		})
	}
	if ju.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ju.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedTagsIDs(); len(nodes) > 0 && !ju.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.PrevTable,
			Columns: []string{job.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.PrevTable,
			Columns: []string{job.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   job.NextTable,
			Columns: []string{job.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   job.NextTable,
			Columns: []string{job.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetName sets the "Name" field.
func (juo *JobUpdateOne) SetName(s string) *JobUpdateOne {
	juo.mutation.SetName(s)
	return juo
}

// SetCreationTime sets the "CreationTime" field.
func (juo *JobUpdateOne) SetCreationTime(t time.Time) *JobUpdateOne {
	juo.mutation.SetCreationTime(t)
	return juo
}

// SetNillableCreationTime sets the "CreationTime" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreationTime(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetCreationTime(*t)
	}
	return juo
}

// SetContent sets the "Content" field.
func (juo *JobUpdateOne) SetContent(s string) *JobUpdateOne {
	juo.mutation.SetContent(s)
	return juo
}

// SetStaged sets the "Staged" field.
func (juo *JobUpdateOne) SetStaged(b bool) *JobUpdateOne {
	juo.mutation.SetStaged(b)
	return juo
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (juo *JobUpdateOne) AddTaskIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddTaskIDs(ids...)
	return juo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (juo *JobUpdateOne) AddTasks(t ...*Task) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.AddTaskIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (juo *JobUpdateOne) AddTagIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddTagIDs(ids...)
	return juo
}

// AddTags adds the "tags" edges to the Tag entity.
func (juo *JobUpdateOne) AddTags(t ...*Tag) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.AddTagIDs(ids...)
}

// SetPrevID sets the "prev" edge to the Job entity by ID.
func (juo *JobUpdateOne) SetPrevID(id int) *JobUpdateOne {
	juo.mutation.SetPrevID(id)
	return juo
}

// SetNillablePrevID sets the "prev" edge to the Job entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillablePrevID(id *int) *JobUpdateOne {
	if id != nil {
		juo = juo.SetPrevID(*id)
	}
	return juo
}

// SetPrev sets the "prev" edge to the Job entity.
func (juo *JobUpdateOne) SetPrev(j *Job) *JobUpdateOne {
	return juo.SetPrevID(j.ID)
}

// SetNextID sets the "next" edge to the Job entity by ID.
func (juo *JobUpdateOne) SetNextID(id int) *JobUpdateOne {
	juo.mutation.SetNextID(id)
	return juo
}

// SetNillableNextID sets the "next" edge to the Job entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableNextID(id *int) *JobUpdateOne {
	if id != nil {
		juo = juo.SetNextID(*id)
	}
	return juo
}

// SetNext sets the "next" edge to the Job entity.
func (juo *JobUpdateOne) SetNext(j *Job) *JobUpdateOne {
	return juo.SetNextID(j.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (juo *JobUpdateOne) SetOwnerID(id int) *JobUpdateOne {
	juo.mutation.SetOwnerID(id)
	return juo
}

// SetOwner sets the "owner" edge to the User entity.
func (juo *JobUpdateOne) SetOwner(u *User) *JobUpdateOne {
	return juo.SetOwnerID(u.ID)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (juo *JobUpdateOne) ClearTasks() *JobUpdateOne {
	juo.mutation.ClearTasks()
	return juo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (juo *JobUpdateOne) RemoveTaskIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveTaskIDs(ids...)
	return juo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (juo *JobUpdateOne) RemoveTasks(t ...*Task) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.RemoveTaskIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (juo *JobUpdateOne) ClearTags() *JobUpdateOne {
	juo.mutation.ClearTags()
	return juo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (juo *JobUpdateOne) RemoveTagIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveTagIDs(ids...)
	return juo
}

// RemoveTags removes "tags" edges to Tag entities.
func (juo *JobUpdateOne) RemoveTags(t ...*Tag) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.RemoveTagIDs(ids...)
}

// ClearPrev clears the "prev" edge to the Job entity.
func (juo *JobUpdateOne) ClearPrev() *JobUpdateOne {
	juo.mutation.ClearPrev()
	return juo
}

// ClearNext clears the "next" edge to the Job entity.
func (juo *JobUpdateOne) ClearNext() *JobUpdateOne {
	juo.mutation.ClearNext()
	return juo
}

// ClearOwner clears the "owner" edge to the User entity.
func (juo *JobUpdateOne) ClearOwner() *JobUpdateOne {
	juo.mutation.ClearOwner()
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	if len(juo.hooks) == 0 {
		if err = juo.check(); err != nil {
			return nil, err
		}
		node, err = juo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = juo.check(); err != nil {
				return nil, err
			}
			juo.mutation = mutation
			node, err = juo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(juo.hooks) - 1; i >= 0; i-- {
			if juo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = juo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, juo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Job.Name": %w`, err)}
		}
	}
	if v, ok := juo.mutation.Content(); ok {
		if err := job.ContentValidator(v); err != nil {
			return &ValidationError{Name: "Content", err: fmt.Errorf(`ent: validator failed for field "Job.Content": %w`, err)}
		}
	}
	if _, ok := juo.mutation.OwnerID(); juo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Job.owner"`)
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldName,
		})
	}
	if value, ok := juo.mutation.CreationTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCreationTime,
		})
	}
	if value, ok := juo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldContent,
		})
	}
	if value, ok := juo.mutation.Staged(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldStaged,
		})
	}
	if juo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !juo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !juo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.PrevTable,
			Columns: []string{job.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.PrevTable,
			Columns: []string{job.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   job.NextTable,
			Columns: []string{job.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   job.NextTable,
			Columns: []string{job.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
