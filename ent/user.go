// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	// The name displayed for the user
	Name string `json:"Name,omitempty"`
	// OAuthID holds the value of the "OAuthID" field.
	// OAuth Subject ID of the user
	OAuthID string `json:"-"`
	// PhotoURL holds the value of the "PhotoURL" field.
	// URL to the user's profile photo.
	PhotoURL string `json:"PhotoURL,omitempty"`
	// SessionToken holds the value of the "SessionToken" field.
	// The session token currently authenticating the user
	SessionToken string `json:"-"`
	// IsActivated holds the value of the "IsActivated" field.
	// True iff the user is active and able to authenticate
	IsActivated bool `json:"IsActivated,omitempty"`
	// IsAdmin holds the value of the "IsAdmin" field.
	// True iff the user is an Admin
	IsAdmin bool `json:"IsAdmin,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	event_likers *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Jobs holds the value of the jobs edge.
	Jobs []*Job `json:"jobs,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JobsOrErr() ([]*Job, error) {
	if e.loadedTypes[0] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsActivated, user.FieldIsAdmin:
			values[i] = new(sql.NullBool)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldOAuthID, user.FieldPhotoURL, user.FieldSessionToken:
			values[i] = new(sql.NullString)
		case user.ForeignKeys[0]: // event_likers
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldOAuthID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OAuthID", values[i])
			} else if value.Valid {
				u.OAuthID = value.String
			}
		case user.FieldPhotoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PhotoURL", values[i])
			} else if value.Valid {
				u.PhotoURL = value.String
			}
		case user.FieldSessionToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SessionToken", values[i])
			} else if value.Valid {
				u.SessionToken = value.String
			}
		case user.FieldIsActivated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsActivated", values[i])
			} else if value.Valid {
				u.IsActivated = value.Bool
			}
		case user.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsAdmin", values[i])
			} else if value.Valid {
				u.IsAdmin = value.Bool
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_likers", value)
			} else if value.Valid {
				u.event_likers = new(int)
				*u.event_likers = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryJobs queries the "jobs" edge of the User entity.
func (u *User) QueryJobs() *JobQuery {
	return (&UserClient{config: u.config}).QueryJobs(u)
}

// QueryEvents queries the "events" edge of the User entity.
func (u *User) QueryEvents() *EventQuery {
	return (&UserClient{config: u.config}).QueryEvents(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", Name=")
	builder.WriteString(u.Name)
	builder.WriteString(", OAuthID=<sensitive>")
	builder.WriteString(", PhotoURL=")
	builder.WriteString(u.PhotoURL)
	builder.WriteString(", SessionToken=<sensitive>")
	builder.WriteString(", IsActivated=")
	builder.WriteString(fmt.Sprintf("%v", u.IsActivated))
	builder.WriteString(", IsAdmin=")
	builder.WriteString(fmt.Sprintf("%v", u.IsAdmin))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
