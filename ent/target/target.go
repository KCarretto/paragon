// Code generated by entc, DO NOT EDIT.

package target

import (
	"fmt"
)

const (
	// Label holds the string label denoting the target type in the database.
	Label = "target"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOS holds the string denoting the os field in the database.
	FieldOS = "os"
	// FieldPrimaryIP holds the string denoting the primaryip field in the database.
	FieldPrimaryIP = "primary_ip"
	// FieldMachineUUID holds the string denoting the machineuuid field in the database.
	FieldMachineUUID = "machine_uuid"
	// FieldPublicIP holds the string denoting the publicip field in the database.
	FieldPublicIP = "public_ip"
	// FieldPrimaryMAC holds the string denoting the primarymac field in the database.
	FieldPrimaryMAC = "primary_mac"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldLastSeen holds the string denoting the lastseen field in the database.
	FieldLastSeen = "last_seen"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeCredentials holds the string denoting the credentials edge name in mutations.
	EdgeCredentials = "credentials"
	// Table holds the table name of the target in the database.
	Table = "targets"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "target_tasks"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "target_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// CredentialsTable is the table that holds the credentials relation/edge.
	CredentialsTable = "credentials"
	// CredentialsInverseTable is the table name for the Credential entity.
	// It exists in this package in order to avoid circular dependency with the "credential" package.
	CredentialsInverseTable = "credentials"
	// CredentialsColumn is the table column denoting the credentials relation/edge.
	CredentialsColumn = "target_credentials"
)

// Columns holds all SQL columns for target fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOS,
	FieldPrimaryIP,
	FieldMachineUUID,
	FieldPublicIP,
	FieldPrimaryMAC,
	FieldHostname,
	FieldLastSeen,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"target_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// MachineUUIDValidator is a validator for the "MachineUUID" field. It is called by the builders before save.
	MachineUUIDValidator func(string) error
)

// OS defines the type for the "OS" enum field.
type OS string

// OS values.
const (
	OSLINUX   OS = "LINUX"
	OSWINDOWS OS = "WINDOWS"
	OSBSD     OS = "BSD"
	OSMACOS   OS = "MACOS"
)

func (_os OS) String() string {
	return string(_os)
}

// OSValidator is a validator for the "OS" field enum values. It is called by the builders before save.
func OSValidator(_os OS) error {
	switch _os {
	case OSLINUX, OSWINDOWS, OSBSD, OSMACOS:
		return nil
	default:
		return fmt.Errorf("target: invalid enum value for OS field: %q", _os)
	}
}
