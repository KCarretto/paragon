// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/paragon/ent/credential"
	"github.com/kcarretto/paragon/ent/event"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/link"
	"github.com/kcarretto/paragon/ent/service"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetCreationTime sets the "CreationTime" field.
func (ec *EventCreate) SetCreationTime(t time.Time) *EventCreate {
	ec.mutation.SetCreationTime(t)
	return ec
}

// SetNillableCreationTime sets the "CreationTime" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreationTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreationTime(*t)
	}
	return ec
}

// SetKind sets the "Kind" field.
func (ec *EventCreate) SetKind(e event.Kind) *EventCreate {
	ec.mutation.SetKind(e)
	return ec
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (ec *EventCreate) SetJobID(id int) *EventCreate {
	ec.mutation.SetJobID(id)
	return ec
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableJobID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetJobID(*id)
	}
	return ec
}

// SetJob sets the "job" edge to the Job entity.
func (ec *EventCreate) SetJob(j *Job) *EventCreate {
	return ec.SetJobID(j.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (ec *EventCreate) SetFileID(id int) *EventCreate {
	ec.mutation.SetFileID(id)
	return ec
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableFileID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetFileID(*id)
	}
	return ec
}

// SetFile sets the "file" edge to the File entity.
func (ec *EventCreate) SetFile(f *File) *EventCreate {
	return ec.SetFileID(f.ID)
}

// SetCredentialID sets the "credential" edge to the Credential entity by ID.
func (ec *EventCreate) SetCredentialID(id int) *EventCreate {
	ec.mutation.SetCredentialID(id)
	return ec
}

// SetNillableCredentialID sets the "credential" edge to the Credential entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableCredentialID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetCredentialID(*id)
	}
	return ec
}

// SetCredential sets the "credential" edge to the Credential entity.
func (ec *EventCreate) SetCredential(c *Credential) *EventCreate {
	return ec.SetCredentialID(c.ID)
}

// SetLinkID sets the "link" edge to the Link entity by ID.
func (ec *EventCreate) SetLinkID(id int) *EventCreate {
	ec.mutation.SetLinkID(id)
	return ec
}

// SetNillableLinkID sets the "link" edge to the Link entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableLinkID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetLinkID(*id)
	}
	return ec
}

// SetLink sets the "link" edge to the Link entity.
func (ec *EventCreate) SetLink(l *Link) *EventCreate {
	return ec.SetLinkID(l.ID)
}

// SetTagID sets the "tag" edge to the Tag entity by ID.
func (ec *EventCreate) SetTagID(id int) *EventCreate {
	ec.mutation.SetTagID(id)
	return ec
}

// SetNillableTagID sets the "tag" edge to the Tag entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableTagID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetTagID(*id)
	}
	return ec
}

// SetTag sets the "tag" edge to the Tag entity.
func (ec *EventCreate) SetTag(t *Tag) *EventCreate {
	return ec.SetTagID(t.ID)
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (ec *EventCreate) SetTargetID(id int) *EventCreate {
	ec.mutation.SetTargetID(id)
	return ec
}

// SetNillableTargetID sets the "target" edge to the Target entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableTargetID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetTargetID(*id)
	}
	return ec
}

// SetTarget sets the "target" edge to the Target entity.
func (ec *EventCreate) SetTarget(t *Target) *EventCreate {
	return ec.SetTargetID(t.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (ec *EventCreate) SetTaskID(id int) *EventCreate {
	ec.mutation.SetTaskID(id)
	return ec
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableTaskID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetTaskID(*id)
	}
	return ec
}

// SetTask sets the "task" edge to the Task entity.
func (ec *EventCreate) SetTask(t *Task) *EventCreate {
	return ec.SetTaskID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ec *EventCreate) SetUserID(id int) *EventCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableUserID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetUserID(*id)
	}
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *EventCreate) SetUser(u *User) *EventCreate {
	return ec.SetUserID(u.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (ec *EventCreate) SetEventID(id int) *EventCreate {
	ec.mutation.SetEventID(id)
	return ec
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableEventID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetEventID(*id)
	}
	return ec
}

// SetEvent sets the "event" edge to the Event entity.
func (ec *EventCreate) SetEvent(e *Event) *EventCreate {
	return ec.SetEventID(e.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (ec *EventCreate) SetServiceID(id int) *EventCreate {
	ec.mutation.SetServiceID(id)
	return ec
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableServiceID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetServiceID(*id)
	}
	return ec
}

// SetService sets the "service" edge to the Service entity.
func (ec *EventCreate) SetService(s *Service) *EventCreate {
	return ec.SetServiceID(s.ID)
}

// AddLikerIDs adds the "likers" edge to the User entity by IDs.
func (ec *EventCreate) AddLikerIDs(ids ...int) *EventCreate {
	ec.mutation.AddLikerIDs(ids...)
	return ec
}

// AddLikers adds the "likers" edges to the User entity.
func (ec *EventCreate) AddLikers(u ...*User) *EventCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ec.AddLikerIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ec *EventCreate) SetOwnerID(id int) *EventCreate {
	ec.mutation.SetOwnerID(id)
	return ec
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableOwnerID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetOwnerID(*id)
	}
	return ec
}

// SetOwner sets the "owner" edge to the User entity.
func (ec *EventCreate) SetOwner(u *User) *EventCreate {
	return ec.SetOwnerID(u.ID)
}

// SetSvcOwnerID sets the "svcOwner" edge to the Service entity by ID.
func (ec *EventCreate) SetSvcOwnerID(id int) *EventCreate {
	ec.mutation.SetSvcOwnerID(id)
	return ec
}

// SetNillableSvcOwnerID sets the "svcOwner" edge to the Service entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableSvcOwnerID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetSvcOwnerID(*id)
	}
	return ec
}

// SetSvcOwner sets the "svcOwner" edge to the Service entity.
func (ec *EventCreate) SetSvcOwner(s *Service) *EventCreate {
	return ec.SetSvcOwnerID(s.ID)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.CreationTime(); !ok {
		v := event.DefaultCreationTime()
		ec.mutation.SetCreationTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.CreationTime(); !ok {
		return &ValidationError{Name: "CreationTime", err: errors.New(`ent: missing required field "Event.CreationTime"`)}
	}
	if _, ok := ec.mutation.Kind(); !ok {
		return &ValidationError{Name: "Kind", err: errors.New(`ent: missing required field "Event.Kind"`)}
	}
	if v, ok := ec.mutation.Kind(); ok {
		if err := event.KindValidator(v); err != nil {
			return &ValidationError{Name: "Kind", err: fmt.Errorf(`ent: validator failed for field "Event.Kind": %w`, err)}
		}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: event.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.CreationTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldCreationTime,
		})
		_node.CreationTime = value
	}
	if value, ok := ec.mutation.Kind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldKind,
		})
		_node.Kind = value
	}
	if nodes := ec.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_job = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_file = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_credential = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.LinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_link = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_tag = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_target = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_task = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_event = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_service = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.LikersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SvcOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
