// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetQueueTime sets the "QueueTime" field.
func (tu *TaskUpdate) SetQueueTime(t time.Time) *TaskUpdate {
	tu.mutation.SetQueueTime(t)
	return tu
}

// SetNillableQueueTime sets the "QueueTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableQueueTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetQueueTime(*t)
	}
	return tu
}

// SetLastChangedTime sets the "LastChangedTime" field.
func (tu *TaskUpdate) SetLastChangedTime(t time.Time) *TaskUpdate {
	tu.mutation.SetLastChangedTime(t)
	return tu
}

// SetClaimTime sets the "ClaimTime" field.
func (tu *TaskUpdate) SetClaimTime(t time.Time) *TaskUpdate {
	tu.mutation.SetClaimTime(t)
	return tu
}

// SetNillableClaimTime sets the "ClaimTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableClaimTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetClaimTime(*t)
	}
	return tu
}

// ClearClaimTime clears the value of the "ClaimTime" field.
func (tu *TaskUpdate) ClearClaimTime() *TaskUpdate {
	tu.mutation.ClearClaimTime()
	return tu
}

// SetExecStartTime sets the "ExecStartTime" field.
func (tu *TaskUpdate) SetExecStartTime(t time.Time) *TaskUpdate {
	tu.mutation.SetExecStartTime(t)
	return tu
}

// SetNillableExecStartTime sets the "ExecStartTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExecStartTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetExecStartTime(*t)
	}
	return tu
}

// ClearExecStartTime clears the value of the "ExecStartTime" field.
func (tu *TaskUpdate) ClearExecStartTime() *TaskUpdate {
	tu.mutation.ClearExecStartTime()
	return tu
}

// SetExecStopTime sets the "ExecStopTime" field.
func (tu *TaskUpdate) SetExecStopTime(t time.Time) *TaskUpdate {
	tu.mutation.SetExecStopTime(t)
	return tu
}

// SetNillableExecStopTime sets the "ExecStopTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExecStopTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetExecStopTime(*t)
	}
	return tu
}

// ClearExecStopTime clears the value of the "ExecStopTime" field.
func (tu *TaskUpdate) ClearExecStopTime() *TaskUpdate {
	tu.mutation.ClearExecStopTime()
	return tu
}

// SetContent sets the "Content" field.
func (tu *TaskUpdate) SetContent(s string) *TaskUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetOutput sets the "Output" field.
func (tu *TaskUpdate) SetOutput(s string) *TaskUpdate {
	tu.mutation.SetOutput(s)
	return tu
}

// SetNillableOutput sets the "Output" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableOutput(s *string) *TaskUpdate {
	if s != nil {
		tu.SetOutput(*s)
	}
	return tu
}

// ClearOutput clears the value of the "Output" field.
func (tu *TaskUpdate) ClearOutput() *TaskUpdate {
	tu.mutation.ClearOutput()
	return tu
}

// SetError sets the "Error" field.
func (tu *TaskUpdate) SetError(s string) *TaskUpdate {
	tu.mutation.SetError(s)
	return tu
}

// SetNillableError sets the "Error" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableError(s *string) *TaskUpdate {
	if s != nil {
		tu.SetError(*s)
	}
	return tu
}

// ClearError clears the value of the "Error" field.
func (tu *TaskUpdate) ClearError() *TaskUpdate {
	tu.mutation.ClearError()
	return tu
}

// SetSessionID sets the "SessionID" field.
func (tu *TaskUpdate) SetSessionID(s string) *TaskUpdate {
	tu.mutation.SetSessionID(s)
	return tu
}

// SetNillableSessionID sets the "SessionID" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSessionID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSessionID(*s)
	}
	return tu
}

// ClearSessionID clears the value of the "SessionID" field.
func (tu *TaskUpdate) ClearSessionID() *TaskUpdate {
	tu.mutation.ClearSessionID()
	return tu
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tu *TaskUpdate) AddTagIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddTagIDs(ids...)
	return tu
}

// AddTags adds the "tags" edges to the Tag entity.
func (tu *TaskUpdate) AddTags(t ...*Tag) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTagIDs(ids...)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (tu *TaskUpdate) SetJobID(id int) *TaskUpdate {
	tu.mutation.SetJobID(id)
	return tu
}

// SetJob sets the "job" edge to the Job entity.
func (tu *TaskUpdate) SetJob(j *Job) *TaskUpdate {
	return tu.SetJobID(j.ID)
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (tu *TaskUpdate) SetTargetID(id int) *TaskUpdate {
	tu.mutation.SetTargetID(id)
	return tu
}

// SetNillableTargetID sets the "target" edge to the Target entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableTargetID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetTargetID(*id)
	}
	return tu
}

// SetTarget sets the "target" edge to the Target entity.
func (tu *TaskUpdate) SetTarget(t *Target) *TaskUpdate {
	return tu.SetTargetID(t.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tu *TaskUpdate) ClearTags() *TaskUpdate {
	tu.mutation.ClearTags()
	return tu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tu *TaskUpdate) RemoveTagIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveTagIDs(ids...)
	return tu
}

// RemoveTags removes "tags" edges to Tag entities.
func (tu *TaskUpdate) RemoveTags(t ...*Tag) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTagIDs(ids...)
}

// ClearJob clears the "job" edge to the Job entity.
func (tu *TaskUpdate) ClearJob() *TaskUpdate {
	tu.mutation.ClearJob()
	return tu
}

// ClearTarget clears the "target" edge to the Target entity.
func (tu *TaskUpdate) ClearTarget() *TaskUpdate {
	tu.mutation.ClearTarget()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Content(); ok {
		if err := task.ContentValidator(v); err != nil {
			return &ValidationError{Name: "Content", err: fmt.Errorf(`ent: validator failed for field "Task.Content": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SessionID(); ok {
		if err := task.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "SessionID", err: fmt.Errorf(`ent: validator failed for field "Task.SessionID": %w`, err)}
		}
	}
	if _, ok := tu.mutation.JobID(); tu.mutation.JobCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.job"`)
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.QueueTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldQueueTime,
		})
	}
	if value, ok := tu.mutation.LastChangedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldLastChangedTime,
		})
	}
	if value, ok := tu.mutation.ClaimTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldClaimTime,
		})
	}
	if tu.mutation.ClaimTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldClaimTime,
		})
	}
	if value, ok := tu.mutation.ExecStartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldExecStartTime,
		})
	}
	if tu.mutation.ExecStartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldExecStartTime,
		})
	}
	if value, ok := tu.mutation.ExecStopTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldExecStopTime,
		})
	}
	if tu.mutation.ExecStopTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldExecStopTime,
		})
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldContent,
		})
	}
	if value, ok := tu.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldOutput,
		})
	}
	if tu.mutation.OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldOutput,
		})
	}
	if value, ok := tu.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldError,
		})
	}
	if tu.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldError,
		})
	}
	if value, ok := tu.mutation.SessionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldSessionID,
		})
	}
	if tu.mutation.SessionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldSessionID,
		})
	}
	if tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: task.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: task.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: task.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.JobTable,
			Columns: []string{task.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.JobTable,
			Columns: []string{task.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TargetTable,
			Columns: []string{task.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TargetTable,
			Columns: []string{task.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetQueueTime sets the "QueueTime" field.
func (tuo *TaskUpdateOne) SetQueueTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetQueueTime(t)
	return tuo
}

// SetNillableQueueTime sets the "QueueTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableQueueTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetQueueTime(*t)
	}
	return tuo
}

// SetLastChangedTime sets the "LastChangedTime" field.
func (tuo *TaskUpdateOne) SetLastChangedTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetLastChangedTime(t)
	return tuo
}

// SetClaimTime sets the "ClaimTime" field.
func (tuo *TaskUpdateOne) SetClaimTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetClaimTime(t)
	return tuo
}

// SetNillableClaimTime sets the "ClaimTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableClaimTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetClaimTime(*t)
	}
	return tuo
}

// ClearClaimTime clears the value of the "ClaimTime" field.
func (tuo *TaskUpdateOne) ClearClaimTime() *TaskUpdateOne {
	tuo.mutation.ClearClaimTime()
	return tuo
}

// SetExecStartTime sets the "ExecStartTime" field.
func (tuo *TaskUpdateOne) SetExecStartTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetExecStartTime(t)
	return tuo
}

// SetNillableExecStartTime sets the "ExecStartTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExecStartTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetExecStartTime(*t)
	}
	return tuo
}

// ClearExecStartTime clears the value of the "ExecStartTime" field.
func (tuo *TaskUpdateOne) ClearExecStartTime() *TaskUpdateOne {
	tuo.mutation.ClearExecStartTime()
	return tuo
}

// SetExecStopTime sets the "ExecStopTime" field.
func (tuo *TaskUpdateOne) SetExecStopTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetExecStopTime(t)
	return tuo
}

// SetNillableExecStopTime sets the "ExecStopTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExecStopTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetExecStopTime(*t)
	}
	return tuo
}

// ClearExecStopTime clears the value of the "ExecStopTime" field.
func (tuo *TaskUpdateOne) ClearExecStopTime() *TaskUpdateOne {
	tuo.mutation.ClearExecStopTime()
	return tuo
}

// SetContent sets the "Content" field.
func (tuo *TaskUpdateOne) SetContent(s string) *TaskUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetOutput sets the "Output" field.
func (tuo *TaskUpdateOne) SetOutput(s string) *TaskUpdateOne {
	tuo.mutation.SetOutput(s)
	return tuo
}

// SetNillableOutput sets the "Output" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableOutput(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetOutput(*s)
	}
	return tuo
}

// ClearOutput clears the value of the "Output" field.
func (tuo *TaskUpdateOne) ClearOutput() *TaskUpdateOne {
	tuo.mutation.ClearOutput()
	return tuo
}

// SetError sets the "Error" field.
func (tuo *TaskUpdateOne) SetError(s string) *TaskUpdateOne {
	tuo.mutation.SetError(s)
	return tuo
}

// SetNillableError sets the "Error" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableError(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetError(*s)
	}
	return tuo
}

// ClearError clears the value of the "Error" field.
func (tuo *TaskUpdateOne) ClearError() *TaskUpdateOne {
	tuo.mutation.ClearError()
	return tuo
}

// SetSessionID sets the "SessionID" field.
func (tuo *TaskUpdateOne) SetSessionID(s string) *TaskUpdateOne {
	tuo.mutation.SetSessionID(s)
	return tuo
}

// SetNillableSessionID sets the "SessionID" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSessionID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSessionID(*s)
	}
	return tuo
}

// ClearSessionID clears the value of the "SessionID" field.
func (tuo *TaskUpdateOne) ClearSessionID() *TaskUpdateOne {
	tuo.mutation.ClearSessionID()
	return tuo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tuo *TaskUpdateOne) AddTagIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddTagIDs(ids...)
	return tuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (tuo *TaskUpdateOne) AddTags(t ...*Tag) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTagIDs(ids...)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (tuo *TaskUpdateOne) SetJobID(id int) *TaskUpdateOne {
	tuo.mutation.SetJobID(id)
	return tuo
}

// SetJob sets the "job" edge to the Job entity.
func (tuo *TaskUpdateOne) SetJob(j *Job) *TaskUpdateOne {
	return tuo.SetJobID(j.ID)
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (tuo *TaskUpdateOne) SetTargetID(id int) *TaskUpdateOne {
	tuo.mutation.SetTargetID(id)
	return tuo
}

// SetNillableTargetID sets the "target" edge to the Target entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTargetID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetTargetID(*id)
	}
	return tuo
}

// SetTarget sets the "target" edge to the Target entity.
func (tuo *TaskUpdateOne) SetTarget(t *Target) *TaskUpdateOne {
	return tuo.SetTargetID(t.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tuo *TaskUpdateOne) ClearTags() *TaskUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tuo *TaskUpdateOne) RemoveTagIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveTagIDs(ids...)
	return tuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (tuo *TaskUpdateOne) RemoveTags(t ...*Tag) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTagIDs(ids...)
}

// ClearJob clears the "job" edge to the Job entity.
func (tuo *TaskUpdateOne) ClearJob() *TaskUpdateOne {
	tuo.mutation.ClearJob()
	return tuo
}

// ClearTarget clears the "target" edge to the Target entity.
func (tuo *TaskUpdateOne) ClearTarget() *TaskUpdateOne {
	tuo.mutation.ClearTarget()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Content(); ok {
		if err := task.ContentValidator(v); err != nil {
			return &ValidationError{Name: "Content", err: fmt.Errorf(`ent: validator failed for field "Task.Content": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SessionID(); ok {
		if err := task.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "SessionID", err: fmt.Errorf(`ent: validator failed for field "Task.SessionID": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.JobID(); tuo.mutation.JobCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.job"`)
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: task.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.QueueTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldQueueTime,
		})
	}
	if value, ok := tuo.mutation.LastChangedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldLastChangedTime,
		})
	}
	if value, ok := tuo.mutation.ClaimTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldClaimTime,
		})
	}
	if tuo.mutation.ClaimTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldClaimTime,
		})
	}
	if value, ok := tuo.mutation.ExecStartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldExecStartTime,
		})
	}
	if tuo.mutation.ExecStartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldExecStartTime,
		})
	}
	if value, ok := tuo.mutation.ExecStopTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldExecStopTime,
		})
	}
	if tuo.mutation.ExecStopTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldExecStopTime,
		})
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldContent,
		})
	}
	if value, ok := tuo.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldOutput,
		})
	}
	if tuo.mutation.OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldOutput,
		})
	}
	if value, ok := tuo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldError,
		})
	}
	if tuo.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldError,
		})
	}
	if value, ok := tuo.mutation.SessionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldSessionID,
		})
	}
	if tuo.mutation.SessionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldSessionID,
		})
	}
	if tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: task.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: task.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: task.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.JobTable,
			Columns: []string{task.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.JobTable,
			Columns: []string{task.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TargetTable,
			Columns: []string{task.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TargetTable,
			Columns: []string{task.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
