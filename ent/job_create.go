// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (jc *JobCreate) SetName(s string) *JobCreate {
	jc.mutation.SetName(s)
	return jc
}

// SetCreationTime sets the "CreationTime" field.
func (jc *JobCreate) SetCreationTime(t time.Time) *JobCreate {
	jc.mutation.SetCreationTime(t)
	return jc
}

// SetNillableCreationTime sets the "CreationTime" field if the given value is not nil.
func (jc *JobCreate) SetNillableCreationTime(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCreationTime(*t)
	}
	return jc
}

// SetContent sets the "Content" field.
func (jc *JobCreate) SetContent(s string) *JobCreate {
	jc.mutation.SetContent(s)
	return jc
}

// SetStaged sets the "Staged" field.
func (jc *JobCreate) SetStaged(b bool) *JobCreate {
	jc.mutation.SetStaged(b)
	return jc
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (jc *JobCreate) AddTaskIDs(ids ...int) *JobCreate {
	jc.mutation.AddTaskIDs(ids...)
	return jc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (jc *JobCreate) AddTasks(t ...*Task) *JobCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jc.AddTaskIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (jc *JobCreate) AddTagIDs(ids ...int) *JobCreate {
	jc.mutation.AddTagIDs(ids...)
	return jc
}

// AddTags adds the "tags" edges to the Tag entity.
func (jc *JobCreate) AddTags(t ...*Tag) *JobCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jc.AddTagIDs(ids...)
}

// SetPrevID sets the "prev" edge to the Job entity by ID.
func (jc *JobCreate) SetPrevID(id int) *JobCreate {
	jc.mutation.SetPrevID(id)
	return jc
}

// SetNillablePrevID sets the "prev" edge to the Job entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillablePrevID(id *int) *JobCreate {
	if id != nil {
		jc = jc.SetPrevID(*id)
	}
	return jc
}

// SetPrev sets the "prev" edge to the Job entity.
func (jc *JobCreate) SetPrev(j *Job) *JobCreate {
	return jc.SetPrevID(j.ID)
}

// SetNextID sets the "next" edge to the Job entity by ID.
func (jc *JobCreate) SetNextID(id int) *JobCreate {
	jc.mutation.SetNextID(id)
	return jc
}

// SetNillableNextID sets the "next" edge to the Job entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableNextID(id *int) *JobCreate {
	if id != nil {
		jc = jc.SetNextID(*id)
	}
	return jc
}

// SetNext sets the "next" edge to the Job entity.
func (jc *JobCreate) SetNext(j *Job) *JobCreate {
	return jc.SetNextID(j.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (jc *JobCreate) SetOwnerID(id int) *JobCreate {
	jc.mutation.SetOwnerID(id)
	return jc
}

// SetOwner sets the "owner" edge to the User entity.
func (jc *JobCreate) SetOwner(u *User) *JobCreate {
	return jc.SetOwnerID(u.ID)
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	jc.defaults()
	if len(jc.hooks) == 0 {
		if err = jc.check(); err != nil {
			return nil, err
		}
		node, err = jc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jc.check(); err != nil {
				return nil, err
			}
			jc.mutation = mutation
			if node, err = jc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(jc.hooks) - 1; i >= 0; i-- {
			if jc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.CreationTime(); !ok {
		v := job.DefaultCreationTime()
		jc.mutation.SetCreationTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Job.Name"`)}
	}
	if v, ok := jc.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Job.Name": %w`, err)}
		}
	}
	if _, ok := jc.mutation.CreationTime(); !ok {
		return &ValidationError{Name: "CreationTime", err: errors.New(`ent: missing required field "Job.CreationTime"`)}
	}
	if _, ok := jc.mutation.Content(); !ok {
		return &ValidationError{Name: "Content", err: errors.New(`ent: missing required field "Job.Content"`)}
	}
	if v, ok := jc.mutation.Content(); ok {
		if err := job.ContentValidator(v); err != nil {
			return &ValidationError{Name: "Content", err: fmt.Errorf(`ent: validator failed for field "Job.Content": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Staged(); !ok {
		return &ValidationError{Name: "Staged", err: errors.New(`ent: missing required field "Job.Staged"`)}
	}
	if _, ok := jc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Job.owner"`)}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: job.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		}
	)
	if value, ok := jc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldName,
		})
		_node.Name = value
	}
	if value, ok := jc.mutation.CreationTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCreationTime,
		})
		_node.CreationTime = value
	}
	if value, ok := jc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := jc.mutation.Staged(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldStaged,
		})
		_node.Staged = value
	}
	if nodes := jc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.TasksTable,
			Columns: []string{job.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.PrevTable,
			Columns: []string{job.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_next = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   job.NextTable,
			Columns: []string{job.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JobCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
