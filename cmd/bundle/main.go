package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	assetslib "github.com/kcarretto/paragon/pkg/script/stdlib/assets"
)

func main() {
	assets := []assetslib.NamedReader{}

	// Open all files in the assets folder and add them to our bundler
	if err := filepath.Walk(
		"assets",
		func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}

			f, err := os.Open(path)
			if err != nil {
				return err
			}

			assets = append(assets, assetslib.NamedReader{Reader: f, Name: path})
			return nil
		},
	); err != nil {
		log.Fatal(err)
	}

	// Compress files into TarGZ Bundle
	bundle, err := assetslib.NewTarGZBundler(assets...)
	if err != nil {
		log.Fatal(fmt.Errorf("failed to bundle assets: %w", err))
	}

	// Write files to a Go file :)
	if err := ioutil.WriteFile(
		"assets.gen.go",
		[]byte(fmt.Sprintf(
			"// Code generated by github.com/kcarretto/paragon/cmd/bundle; DO NOT EDIT.\npackage main\n\nvar assets []byte = %#v\n\n",
			bundle.Buffer.Bytes(),
		)),
		0644,
	); err != nil {
		log.Fatal(fmt.Errorf("failed to write bundled assets: %w", err))
	}

	// Add a file to run the dropper
	if err := ioutil.WriteFile("main.gen.go", []byte(dropperMain), 0644); err != nil {
		log.Fatal(err)
	}
}
